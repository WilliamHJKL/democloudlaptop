---
- name: Check that the VM is not running yet
  virt:
    command: list_vms
  register: result

- name: Create the configuration for storing kickstarts
  file:
    state: directory
    name: /etc/libvirt/kickstarts/{{ vm_name }}
  tags:
    - kickstart

- name: Install the kickstart for {{ vm_name }}
  template:
    src: sat
    dest: /etc/libvirt/kickstarts/{{ vm_name }}/ks.cfg
  tags:
    - kickstart

- name: Run the virt-install
  command: /usr/bin/virt-install -n {{ vm_hostname }} {{ vm_memory_options }} --disk pool={{ storage_name}},size={{ vm_disk_size }} --vcpus={{ vm_num_cpus }},maxvcpus={{ vm_num_cpus_max }} --initrd-inject=/etc/libvirt/kickstarts/{{ vm_name }}/ks.cfg  --autostart --noautoconsole --watchdog default --network bridge=brinternal,model=virtio,mac={{ int_sat_mac }} --rng=/dev/random -l ftp://{{ kvm_host_ip }}/pub/EL/7/ --graphics none -x 'net.ifnames=0 ksdevice=eth0 ks=file:/ks.cfg console=tty0 console=ttyS0'
  tags:
    - virt-install

- name: Wait for the install to finish
  virt:
    command: status
    name: "{{ vm_hostname }}"
  register: vmstatus
  until: vmstatus.status == 'shutdown'
  retries: 500
  delay: 10

- name: Start the VM for {{ vm_hostname }}
  virt:
    command: start
    name: "{{ vm_hostname }}"

- name: Check that the VM is running.
  local_action: wait_for host={{ ansible_ssh_host }}
    state=started
    port=22
    delay=30
    timeout=300
    connect_timeout=15
